Author: Nicholas Carnival
Due Date: Feb 15 2019

Really Cool Stuff:
echo -e "\033(0"

I used the format given in learning examples in order to not miss any requirements

=========================================================================================
=					Weeks 1-3					     =
=========================================================================================
Commands:
APROPOS  (the word "apropos" can be defined as "very appropriate to a particular situation").
This command searches the man pages and the man page descriptions for the word/term
MAN
Man pages contain information on every command...
CD, CD -, and cd with an arbitrary path
Changes the directory 
LS along with it's -a, -R, and -l options
Ls lists what is in the current directory
ls -a lists dotfiles
ls -l lists all of the files and file size
CAT
concatenates files and prints them out
LESS
displays the contents one line at a time 'space' 'q'
EXPORT 
exports the environment variables
ALIAS
used to create function/keybindings alias ..='cd ..'
PWD
prints working directory
ECHO and ECHO -n
writes arguments to the standard output '-n' doesnt append a new line
MKDIR and it's option -p
makes a directory
RMDIR
deletes an empty directory
RM and it's options -r and -f
deletes stuff, recrusive force
FIND and it's options -type and -name
searches for a file in a directory hierarchy
CP and it's option -r
copies files to directories, recursive
MV and it's options -f, -n, and -i
moves files to directories, i prompts before overwriting
TOUCH
creates a file 
WGET
downloads files from the internet
TAR
creates tarballs: tar -czvf name-of-archive.tar.gz /path/to/directory
extracts tarballs: tar -xzvf archive.tar.gz
SCP
basically an ssh copy "secure copy"


Concepts:
    Understand the difference between a relative and absolute path in the linux filesystem
    Understand the meanings of /, ., and .. in terms of paths
    Understand the concept of a "working directory"
    Understand the information displayed in the default prompt on Ubuntu, for example:
	   cjohnso0@bb136-11:~/linux$	
	   This prompt says I have a shell running on Host ______ as User ______ and my working directory is _________?
    Know that ssh allows for running a shell on a remote machine. Be able to explain, in words, what a command like this is saying:
	   $ ssh cjohnso0@gc297-01.mines.edu


Editor:
    What editor keystroke deletes from the cursor position to the end of the line? Not the whole line!
dw
    What editor keystroke jumps the cursor to the beginning of a line? To the end of a line?
0 $
    What editor keystroke(s) let you copy, delete, and paste a select region of lines in a file?
yank, delete, paste
y, d, p
    What editor keystroke(s) let's you save the current file buffer to disk?
w
    What keystrokes exit your editor with saving a file?
wq
    What keystrokes exit your editor without saving the file?
bang
    What keystrokes allow you to select a region of text (multiple lines) for copying or deleting?
visual mode!!!!!!!!!!
v


=========================================================================================
=					Weeks 4-5					     =
=========================================================================================
Commands:
WC and its options -w and -l
prints a newline, word, and byte for each file ??
FILE
determines file type
READ
tries to read bytes from a file descriptor
BASH and options -x and -e
starts a new bash process
DU
disk usage for each file
DF
shows the amount of available disk space
STAT
returns information about a file

Concepts:
    Know the input and output redirection operators <, >, and >>
>> appends to files and stuff...
> standard output
< standard input
    Know that /dev/null is a special file to which you redirect "garbage" output
literally nothing
    Know the special meanings of the characters/wildcards ?, *, [set], and [!set]
Wildcards pattern matching :
    '*' star:
        * gives everything in current directory
        a* matches every file or dir that starts with a including 'a'
        *a* finds files with a somewhere in its name
        .* finds all hidden files 
    '?' question mark:
        ??? any file with three characters
        a?a some file that starts and ends with 'a' 
    '[]' brackets
        [0]
Brace Expansion:    
    {a,b,c}
    {0..9} range
    rm /long/path/{foo, bar} this removes both foo and bar fron long/path
       
Quotes: ('")
    single quotes mean verbatum 'print(0)' returns print(0)
    double quotes allow things to work "print(0)" returns 0
       
            
    Know the special meanings of the $ and ~ characters
    Understand quoting rules with single quotes, double quotes, and no quotes. What does the shell do in each scenario when it sees special characters (like * or $)?
    Be able to trace through simple shell scripts like the shell-dessert.sh explained in class

Bash Script: 
    #!usr/bin/env bash   
    you can slap whatever you want in bash scripts

Editor:
    What keystroke or keystrokes auto-complete words or variable names?
tab usually
Ctrl-N in vim

        
=========================================================================================
=					Weeks 6-8					     =
=========================================================================================

Commands:
    ps 
    This command shows information on what TTY processes are currently running
    top
    This command displays all running linux processes
    kill and option -9
    kill is used to terminate processes
        kill -9 tells the os to kill the process no matter what it is doing (--FORCE!!!!)


Concepts:
    Understand the special meaning of the $? variable. What does it mean if $? is 0 or nonzero?
        exit status of last command
    Understand the difference in Ctrl-C and Ctrl-D
    Know what Ctrl-L and Ctrl-Z do
        Ctrl-L: clears the screen
        Ctrl-Z: suspends processes, they are still runnning
    Understand how to use the while-do-done structure in a bash script
        i="0"
        
        while [$i -lt 4 ]
        do
        echo "Hey"
        i=$[$i+1]
        done
        This should print out hey four times.
        
    Be able to explain the terminating condition of a while loop in terms of $?
    Know how to reference command line arguments in bash scripts (e.g., what is $1, $2, ..., $@?)
        parameters passed in when executing the script
    Know the special meaning of the $$ variable
        process ID of the script
    Know the test command and the importance of its exit status.
    Be able to read the man page for test to find the options you need
        man test
    Know that [] is analagous to test
    Understand how to use the if-then-fi structure in a bash script
        if [ ]; then
        fi
    Know that the false, true, and yes commands exist
        false does nothing, returns exit failure
        true does nothing, returns successful 
        yes outputs yes until killed

==============================================================================================
=					Weeks 9-10					     =
==============================================================================================
Commands:
    grep and its options -l, -v, -e
        -l prints out the files that match the search pattern
        -v returns everything that doesnt match
        -e uses pattern matching, regex
        the ultimate search program
    head and its -n option; note that head -n 3 is the same as head -3
       displays the first ten files from a file 
        -n displays n lines
    tail and its -n option; note that tail -n 3 is the same as tail -3
       the opposite of head 
        -n displays n lines
    sort and its options -n, -k, and -t
        sorts a file
        -n compares string numeric values
        -k searches based on a key location
        -t uses SEP instead of non-blank to blank transitions
    uniq (note the connection to sort)
        removes duplicate lines from a file
        sort list.txt | uniq 'this sorts the list then removes duplicates' 
        sort list.txt | uniq | head | grep 'apple' only apple
    tr and its option -d
        translate command: 
            sort list.txt | tr "[a-z]" "[A-Z]" 'upercases list.txt
        -d deletes stuff
            echo "My id is 1245" | tr -d "[:digit:]" 'prints: My id is'
        -cd deletes inverse
            echo "My id is 1245" | tr -cd "[:digit:]" 'prints: 1245' 
    cut and its options -d, -c and -f
        line by line cut out parts 
        cut -c 1,2,3 list.txt 'grabs the first three characters from everythin in list.txt'
        cut -d uses a custom delimeter instead of tabs
        cut -f selects a range  
        cut -c 1-3,5-8 list.txt 'grabs char 1-3 and 5-8'
    tee and its option -a
        displays an output and creates a file at the same time

        sort list.txt | tee list.txt 'puts sorted file into old file'
        ls | tee list_files.txt 'puts contents of dir into a file'
        tee -a 'appends'

Concepts:
    Understand the Bash control structure: case-in-esac; a multiway control structure similar to C/C++ switch statement.
        case thing to be switched on in
        [a-z]*)
        ;;
        esac
    Understand the Bash control structure: for-do-done; an iterative looping structure not like the C/C++ arithmetic loop.
        for iterator
        do stuff to do
        done
    How are wildcards special to the processing of for-do-done loops?
    In a case-in-esac statement, how do you create a "catch-all" default matching pattern?
        *) This will catch everythin or, 'catch-all'
    What special character sequence signifies the end of a pattern-match block in case-in-esac?
    When multiple patterns match a case-in-esac predicate, which one is evaluated?
        first match
    Understand how if and while structures in Bash depend on the exit status of command(s)
        if command <<<< this checks the exit status of that command
        the [] is it's own command
    Understand how the case and for structures in Bash depend on patterns

==============================================================================================
=					Weeks 11-14					     =
==============================================================================================
Commands:
    sed and its options -e, -i, and -n
        sed edits text from files or pipes
        sed -e used to run multiple sed commands
        sed -i edits the file in place
        sed -n doesn't output to STDOUT 
    Know the s(ubstitute), p(rint), and d(elete) transformations available with sed
    sed s/foo/bar all foo become bar
    sed '9d' deletes the 9th line
    
    Know how to specify a search-and-replace operation in sed (s/Harry/Sally/)
    sed 's/foor/bar'

    How does the g modifier affect the result of s/Harry/Sally/g?
    g stands for globally, or everywhere

    Know how to specify line number scope in sed (5p or 1,3s/Harry/Sally/)

    What does the d sed command do, as in sed 5,8d
    deletes those lines

    chown and its option -R
    recursive, for directories

    Know that the sudo command exists and what it allows you to do (provided you are allowed to run the command)
    run things with root permission

Concepts:
    UNDERSTAND HOW PIPELINES IN *NIX WORK!!!!! For example, explain what each of the following would do:
    	apropos word | grep "count"
            finds every instance of the word count in the man pages
    	cat file.txt | tr '\n' ' ' | wc -l
           this makes each new line a space and wc = 0 
    	sort < file.txt | uniq | head -3
           removes each repeated line top down
    	sort < file.txt | uniq | head -3 | cut -c 1
            outputs the first letter of each line
    	sort < file.txt | uniq | head -3 | cut -c 1 | tr 'ABC' '123'
            replaces ABC with 123 after sorting

    How do you assign the output of a command or pipeline as the value of a variable?
        var=$(EXPRESSION)

    What are the exit codes of grep and sed --- how are they dependent on the pattern argument and their input file?
        sed will only exit 1 if the syntax is wrong, usually exits 0
        grep will exit 1 if no matches are found

    Know the "3x3" nature of Unix permissions --- what do the mnemonics r, w, and x mean?
        read, write, execute.
        ls -la shows the permissions in the UGO order (User, Group, Other)
        -rwxr-xr--

    What can you do to a file or directory with permissions 000?
        the root can do anything to the file, anyone else cannot r,w,or x the file
    How are permissions related to the octal (base 8) number system?
    0 no permission
    1 execute
    2 write
    3 execute + write
    4 read
    5 read + execute
    6 read + write
    7 read + write + execute
    these are all 8 (octal) permissions

    What advantage do the symbolic specifications such as -w and +x have in chmod?
        w is for write permissions, x is for executable permissions

    Know how to tell what permissions the user, group, and others have for a particular file
        stat -c '%a' file
